# -*- coding: utf-8 -*-
#|44

import pythoncom
from win32com.client import Dispatch, gencache

#  Подключим константы API Компас
const = gencache.EnsureModule("{75C9F5D0-B5B8-4526-8681-9903C567D2ED}", 0, 1, 0).constants
const_3d = gencache.EnsureModule("{2CAF168C-7961-4B90-9DA2-701419BEEFE3}", 0, 1, 0).constants

#  Подключим описание интерфейсов API5
KAPI = gencache.EnsureModule("{0422828C-F174-495E-AC5D-D31014DBBE87}", 0, 1, 0)
iKompasObject = KAPI.KompasObject(Dispatch("Kompas.Application.5")._oleobj_.QueryInterface(KAPI.KompasObject.CLSID, pythoncom.IID_IDispatch))

#  Подключим описание интерфейсов API7
KAPI7 = gencache.EnsureModule("{69AC2981-37C0-4379-84FD-5DD2F3C0A520}", 0, 1, 0)
iApplication = KAPI7.IApplication(Dispatch("Kompas.Application.7")._oleobj_.QueryInterface(KAPI7.IApplication.CLSID, pythoncom.IID_IDispatch))

#  Получим активный документ
iKompasDocument = iApplication.ActiveDocument
iKompasDocument3D = KAPI7.IKompasDocument3D(iKompasDocument)
iDocument3D = iKompasObject.ActiveDocument3D()

def test_cylinders(example): #Генерирует примеры, на которых можно было бы испытать программу
    iPart = iDocument3D.GetPart(const_3d.pTop_Part)
    iSketch = iPart.NewEntity(const_3d.o3d_sketch)
    iSketchDefinition = iSketch.GetDefinition()

    if(example == 0):
        iPlane = iPart.GetDefaultEntity(const_3d.o3d_planeXOZ)
        radius = 30
        depth = 20

    elif(example == 1):
        iPlane = iPart.GetDefaultEntity(const_3d.o3d_planeXOY)
        radius = 15
        depth = 80

    else:
        iPlane = iPart.GetDefaultEntity(const_3d.o3d_planeYOZ)
        radius = 7
        depth = 50

    iSketchDefinition.SetPlane(iPlane)
    iSketch.Create()

    #создадим в эскизе окружность
    iDocument2D = iSketchDefinition.BeginEdit()
    obj = iDocument2D.ksCircle(0, 0, radius, 1)
    iSketchDefinition.EndEdit()

    #выполним операцию выдавливания
    iExtrusion = iPart.NewEntity(const_3d.o3d_bossExtrusion)
    iBossExtrusionDefinition = iExtrusion.GetDefinition()
    iBossExtrusionDefinition.SetSketch(iSketch)
    iExtrusionParam = iBossExtrusionDefinition.ExtrusionParam()
    iExtrusionParam.direction = 0
    iExtrusionParam.depthNormal = depth
    iExtrusionParam.draftOutwardNormal = False
    iExtrusionParam.draftValueNormal = 0
    iExtrusionParam.typeNormal = 0
    iExtrusion.Create()


class circle_info: #Информация о грани, на которой будет строиться спираль
    def __init__(self, sel_param_5, iPlane_5, iPlaneNear_5):
        self.sel_param_5 = sel_param_5 #Представление выделенного объекта в API5
        self.sel_param_7 = iKompasObject.TransferInterface(sel_param_5,2,0) #Представление выделенного объекта в API7
        self.iPlane_5 = iPlane_5 #Грань, соответствующая выделенному ребру
        self.iPlaneNear_5 = iPlaneNear_5 #Грань, соответствующая боковому ребру цилиндра

class spiral_settings: #Информация о настройках построения спирали
    def __init__(self, is_object_height, direction, spiral_height, spiral_step):
        self.is_object_height = is_object_height #Строить спираль по длине объекта?
        self.direction = direction #направление навивки (True - прямое)
        self.spiral_height = spiral_height #Высота спирали (не имеет смысла при построении по длине объекта)
        self.spiral_step = spiral_step #длина шага спирали

def get_circle_selected(): #Получить 3Д-круг из выделения в редакторе
    iSelectionMng = iDocument3D.GetSelectionMng()

    if(iSelectionMng.GetCount() == 1): #Если выделен только один объект
        return circle_check(iSelectionMng.GetObjectByIndex(0))

    print("Выдели одно из рёбер цилиндра!")
    return None

def circle_check(circle_candidate): #Подходит для для построения спирали выделенный 3Д-круг?
    if circle_candidate.type == 7:
        param_5 = circle_candidate.GetDefinition()
        param_7 = iKompasObject.TransferInterface(param_5,2,0)
        if param_5.IsCircle(): #Если ребро имеет форму круга
            #print("Это круг!")
            if not(param_7.IsSketchEdge): #Если это НЕ ребро эскиза
                #print("Это реальный круг, а не эскиз!")
                """
                Волшебный код...
                В общем чтобы получить грань (а вместе с ней и нужное направление
                спирали) необходимо применять метод с параметром True или False
                В результате экспериментов было установлено, что правильно грань
                определяется, если при поиске соседних граней у нас возвращается
                коллекция из одного элемента (что логично для цилиндра)

                Вот по этой причине и возникает нехитрый перебор False, а потом True
                """

                is_correct_object = False
                directions = [True, False]
                for i in directions:
                    iPlane_5 = param_5.GetAdjacentFace(directions[i])
                    if iPlane_5.ConnectedFaceCollection().GetCount() == 1:
                        iPlaneNear_5 = iPlane_5.ConnectedFaceCollection().First()
                        if(iPlaneNear_5.IsCylinder()):
                            is_correct_object = True
                            break
                if not(is_correct_object):
                    print("Я уже не знаю, что пошло не так...")
            else:
                print("Тебе нужно выделить ребро ОБЪЕКТА, а не экскиза, формы 'Окружность'!")
        else:
            print("Тебе нужно выделить ребро формы 'ОКРУЖНОСТЬ'!")
    else:
        print("Тебе нужно выделить РЕБРО формы 'Окружность'!")
        return None

    return circle_info(param_5, iPlane_5, iPlaneNear_5)

def spiral_on_circle(c_info, settings): #Построение спирали на 3Д-круге
    #Получение радиуса из выделенной окружности
    iCurve = c_info.sel_param_5.GetCurve3D()
    iCircle = iCurve.GetCurveParam()
    my_radius = iCircle.radius

    #Построение спирали
    iPart7 = iKompasDocument3D.TopPart
    iAuxiliaryGeomContainer = KAPI7.IAuxiliaryGeomContainer(iPart7)
    iSpirals = iAuxiliaryGeomContainer.Spirals3D
    iSpiral_7 = iSpirals.Add(const_3d.o3d_cylindricSpiral)

    iSpiral_5 = iKompasObject.TransferInterface(iSpiral_7,1,0)
    iSpiral_5.SetPlane(c_info.iPlane_5)
    iSpiral_5.SetLocation(0,0)
    iSpiral_5.diamType = 0
    iSpiral_5.diam = my_radius*2
    iSpiral_5.buildMode = 1 #1 - Построение по шагу и высоте
    iSpiral_5.buildDir = False #Выбор направления
    iSpiral_5.heightType = 0

    if settings.is_object_height:
        rez = c_info.iPlaneNear_5.GetCylinderParam()
        iSpiral_5.height = rez[1]  #Высота спирали
    else:
        iSpiral_5.height = settings.spiral_height #Высота спирали

    iSpiral_5.step = settings.spiral_step #Шаг навивки
    iSpiral_5.turnDir = settings.direction #Направление навивки

    iSpiral_7.Update()
    return iSpiral_7

#==============================================================================
#                            Применение кода
#==============================================================================
#for i in range(3): #Генерация тестовых примеров
#    test_cylinders(i)

circle_selected = get_circle_selected()

if circle_selected != None:
    my_spiral_settings = spiral_settings(True, False, 30.0, 5.0)
    my_spiral = spiral_on_circle(circle_selected, my_spiral_settings)




